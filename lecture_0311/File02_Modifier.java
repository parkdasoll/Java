package lecture_0311;

import java.util.Scanner;

public class File02_Modifier {
	public static void main(String[] args) {
		// 제어자(Modifier)
		// - 클래스, 메서드 또는 변수의 선언부에 사용되는 키워드
		// - 부가적인 의미 또는 기능을 부여할 때 사용
		// - 제어자는 하나의 대상에 여러 제어자가 작성이 가능하다.
		//	 단, 접근 제어자는 총 4가지가 있으며 하나만 작성이 가능
		
		// 패키지(Package)
		//	- 연관된 클래스들의 묶음
		// 	- 서로 관련된 클래스들끼리 그룹 단위로 관리하기 위해 사용
		//	- 패키지는 클래스의 이름에도 포함되기 때문에
		//	  다른 패키지에 동일한 이름의 클래스가 작성될 수 있다.
		//		패키지	 	: 이름의 성
		//		클래스 파일 	: 이름
		
		// 접근 제어자(Access Modifier)
		//	- 클래스 또는 클래스의 멤버에 사용
		// 	- 접근의 제한 범위를 지정하기 위한 제어자 
		//	- 종류
		//		public
		//			: 같은 패키지의 클래스 = O
		//			: 다른 패키지의 클래스 = O
		//			: 같은 패키지의 서브 클래스 = O
		//			: 다른 패키지의 서브 클래스 = O
		//			→ 모든 곳에서 접근이 가능
		//		protected
		//			: 같은 패키지의 클래스 = O
		//			: 다른 패키지의 클래스 = X
		//			: 같은 패키지의 서브 클래스 = O
		//			: 다른 패키지의 서브 클래스 = O
		//			→ 같은 패키지에서 접근이 가능하며, 
		//			  다른 패키지에서는 상속 관계에서만 접근이 가능 
		//		default(생략)
		//			: 같은 패키지의 클래스 = O
		//			: 다른 패키지의 클래스 = X
		//			: 같은 패키지의 서브 클래스 = O
		//			: 다른 패키지의 서브 클래스 = X
		//			→ 같은 패키지에서만 접근이 가능
		//		private
		//			: 같은 패키지의 클래스 = X
		//			: 다른 패키지의 클래스 = X
		//			: 같은 패키지의 서브 클래스 = X
		//			: 다른 패키지의 서브 클래스 = X
		//			→ 클래스 내에서만 접근이 가능
		
		// 접근 제어자를 사용하는 이유
		//	- 객체 지향의 특성 중 하나인 캡슐화(Encapsulation)
		//	- 객체 내의 데이터를 보호
		//		→ 데이터가 항상 유효한 값으로 유지
		//		→ 외부에서 값을 사용하거나 수정을 방지
		//	- 접근 범위를 최소화하면 유지보수, 테스트 등의 범위도 
		// 	  최소화된다.
		
		Simple s1 = new Simple();
		s1.publicData = 100;
		s1.protectedData = 200;
		s1.defaultData = 300;
		// s1.privateData = 400;
		// private 으로 선언된 멤버는 선언된 클래스 내에서만 접근이 가능
		// → private 으로 선언된 멤버를 다른 클래스에서 사용하기 위해
		//	 메서드를 통해서 멤버를 다룬다.
		//		캡슐화된 멤버 변수의 값을 반환하는 메서드
		//		→ getter 메서드
		//		캡슐화된 멤버 변수의 값을 설정하는 메서드
		//		→ setter 메서드
		//		→ 메서드에 전달된 값을 검사하여
		//		  유효한 값으로 저장될 수 있도록 해야한다.
		s1.setPrivateData(400);
		
		System.out.println(s1.publicData);
		System.out.println(s1.protectedData);
		System.out.println(s1.defaultData);
		System.out.println(s1.getPrivateData());
		
		
		
		
	}
}
