package lecture_0225;



// 임의의 수학 함수를 정의하기 위한 클래스
class MathFunction {
	// f(x) = x + 10
	//	메서드 명	: f
	//	매개변수 	: x
	//	반환 타입	: int
	
	// 메서드 정의
	int f(int x) {
		// 메서드에 전달된 값을 연산
		int result = x + 10;
		
		// 메서드의 결과 값을 반환
		return result;
		// return 키워드 	: 메서드를 호출한 곳으로 되돌아가는 키워드
		//				: 메서드를 종료하기 위해 사용되며
		//				  키워드 위에 지정된 값이 있으면 값을 결과 값으로 사용한다.
	}
	
	// g(x, y) = x + y
	//	메서드 명 : g
	//	매개변수 	: x, y
	//	반환 타입 : int
	int g(int x, int y) {
		return x + y;
		// return 키워드 다음에 연산자를 포함한 표현식을 작성하면
		// 표현식의 결과 값이 전달된다.
	}
	
}


public class File02_Method {
	// 메서드(Method, Member Function)
	//	- 객체가 갖는 기능(행동)을 의미
	//	- 같은 클래스에 있는 멤버의 접근할 수 있다.
	//	- 객체가 갖는 기능을 의미하기 때문에
	//	  반드시 클래스 내에 작성이 되어야한다.
	//	- 기능을 구현하기 위해 중괄호를 통해 
	//	  명령어를 작성할 영역을 만든다.
	
	// 메서드의 기본 기능
	//	- 입력 값을 받아서 연산/처리하여 결과를 반환
	
	// 메서드 관련 용어
	//	- 메서드 정의
	//		: 메서드를 작성하는 과정
	//		: 메서드의 반환 타입, 메서드명, 매개변수 등을 정한다.
	//	- 메서드 명
	//		: 메서드의 이름 = 식별자
	//		: 어떤 기능 또는 행동을 알 수 있도록 작성하는 것이 좋다.
	//	- 매개변수(Parameter)
	//		: 메서드에 전달되는 값을 저장하기 위한 변수
	//		: 메서드에서 필요한 수 만큼 선언할 수 있다.
	//	- 인자(Argument)
	//		: 메서드에 전달되는 값
	//	- 반환 값(Return Value)
	//		: 메서드의 결과 값
	//		: return 키워드 다음에 지정된 값
	//	- 반환 타입(Return Type)
	//		: 메서드의 결과 값의 타입
	//		: 결과 값이 없는 메서드인 경우 'void' 타입을 작성
	//	- 메서드 호출(Method Call)
	//		: 정의된 메서드를 실행
	//		: 메서드의 식별자와 함께 인자 값을 전달
	//		  매개변수가 없는 메서드인 경우 빈 소괄호만 작성
	
	
	// JVM 이 맨 처음 실행시키는 메서드
	public static void main(String[] args) {
		MathFunction math = new MathFunction();
		
		// 클래스에 정의된 메서드를 사용하는 것을 '호출(call)' 이라고 한다.
		//	- 메서드 호출 표현식 : 메서드명 + (...)
		//	- 프로그램 실행 도중에 메서드를 호출하면
		// 	  프로그램의 흐름이 호출된 메서드의 정의부로 이동
		//	  메서드가 끝나면 호출된 위치로 되돌아간다.(return)
		
		// f() 메서드에 전달되는 값(인자 값) = 20
		int res = math.f(20);
		// int res = 30;
		System.out.println("f(20) = " + res);
		
		System.out.println( "f(15) = " + math.f(15) );
		//System.out.println( "f(15) = " + 25 );
		
		int res2 = math.g(20, 40);
		System.out.println("g(20, 40) = " + res2);
	}
}

















