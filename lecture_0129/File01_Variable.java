package lecture_0129;

public class File01_Variable {

	// main 입력 후 (ctrl + space)
	public static void main(String[] args) {
		// 데이터(Data)
		// 	- 프로그램에서 다루는 값
		//	- Java 에서 다루는 데이터들은
		//	  각각의 타입으로 분류가 된다.
		
		// 자료형(Data Type)
		// 	- 프로그램에서 다루는 데이터의 종류
		//	- 종류
		//	   기본 자료형
		//		boolean		: 논리형(true, false)
		//		char		: 문자형(문자, 유니코드)
		//		byte		: 정수형(1byte) 
		//		short		: 정수형(2byte)
		//		int			: 정수형(4byte), 기본 정수 타입
		//		long		: 정수형(8byte)
		//		float		: 실수형(4byte)
		//		double		: 실수형(8byte), 기본 실수 타입
		//	  참조 타입
		//		String 클래스 : 문자열 
		//		new 키워드를 통해 메모리를 할당 받는 타입
		//		 → 배열, 클래스의 객체, 인터페이스 객체
		
		// 프로그램 내에서 데이터를 사용하기 위해서는
		// 데이터를 저장/유지를 할 수 있어야한다.
		//	데이터를 다루기 위한 기본적인 수단 = 변수(Variable)
		
		// 프로그램은 스스로 데이터들을 모두 기억하지 않기 때문에
		// 개발자가 직접 기억을 시켜야한다.
		
		// Java 프로그램에서는 모든 데이터들을 JVM 내의 메모리에 저장을 시킨다.
		// 이때 임의의 저장 공간에 저장시키기 때문에 정확한 위치를 알기가 쉽지 않다.
		// 저장된 메모리를 쉽게 표시하기 위해 변수를 이용한다.
		//  → 변수	= 데이터가 저장된 메모리 공간에 식별자를 부여한다.
		//		 	= 메모리의 위치를 몰라도 변수를 통해서 메모리에 접근이 가능
		
		// 변수를 사용하기 위해서는
		// 데이터를 저장할 변수를 선언 → 변수를 생성
		//	1. 어떤 타입의 데이터를 다룰 것인가
		//	2. 어떤 목적의 데이터를 다룰 것인가
		
		// 나이를 저장하는 변수
		//	1. int 타입
		//	2. 나이를 저장
		int age; // 나이를 저장할 정수형 변수
		
		// 선언된 변수를 사용하기 위해서는
		// 변수에 데이터를 저장(대입, 할당)
		//	- 대입 연산자(assignment, =)를 통해서 변수에 데이터를 저장
		//	- 대입 연산자는 우선 순위가 제일 낮기 때문에
		//	우측에 다른 연산자를 포함한 표현식이 있으면
		//	변수에 결과 값이 저장된다.
		age = 30; // 변수 age 에 30 을 저장
		
		System.out.println(age);

		// 기본적으로 프로그램의 흐름은 위에서부터 실행하기 때문에
		// 변수의 값을 다른 값으로 저장하면 이미 수행된 명령어에는
		// 영향을 주지 않는다.
		//  → 이후 수행되는 명령어에만 사용된다.
		age = 30 + 20;
		// age = 50;
		// → 대입 연산자의 우측부터 모두 연산한 다음 
		//	 그 '결과 값'을 변수에 저장
		
		System.out.println(age);
		
		// 변수를 선언함과 동시에 데이터를 대입을 할 수 있으며
		// 이를 '변수 초기화(initialization)' 라 한다.
		//	= 초기 세팅
		int number = 0; // 변수 number 를 선언하고 0 을 대입
		System.out.println(number);
		
		
		// 변수를 선언할 때 
		//  1. 이미 선언된 변수는 또 선언할 수 없다.
		// int age;
		//  2. 같은 타입의 변수를 한번에 여러 개 선언할 수 있다.
		int n1, n2, n3; // 정수형 변수 n1, n2, n3 를 선언
		int n4 = 0, n5 = 2; 
		
		// 식별자(Identifier, id)
		//  - 클래스, 변수, 상수, 메서드 등을 식별하기 위한 단어
		//	- 식별자의 원칙
		// 		1. 특수 문자는 '_' 와 '$' 만 작성이 가능
		//		   첫 번째 문자로 작성할 수 없다.
		//		2. Java 에서 사용되는 키워드는 사용 불가능하다.
		//		3. 숫자는 첫 번째 문자로 작성할 수 없다.
		//		4. 한글을 지원하지만, 영어로 작성하는 것이 좋다.
		//		5. boolean 리터럴, null 리터럴은 사용 불가능하다.
		//		6. 식별자에 길이 제한이 없다.
		//		7. 대소문자 구분이 있다.
		
		//	- 식별자를 작성하는 방식
		//		카멜 케이싱(camel casing)
		//		 : 첫 번째 단어는 모두 소문자, 두 번째 이후 단어는 첫 문자만 대문자
		//		 : 변수, 메서드
		//		 : myAge, isFlag, getAge()
		//		파스칼 케이싱(pascal casing)
		//		 : 모든 단어의 첫 문자를 대문자
		//		 : 클래스, 인터페이스
		//		 : String, System ...
		//		스네이크 케이싱(snake casing)
		//		 : 단어 사이에 '_' 를 사용
		//		 : Java 에서는 상수에서만 사용되며, 상수는 모든 문자를 대문자로 작성
		//		 : HOME_ADDRESS, STATIC_CODE ...
		
	}

}
























